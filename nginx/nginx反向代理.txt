location写法：

location [=|~|~*|^~] URI地址 {
	....
	....
}


=	精确匹配URI地址

location /bbs {
	...
	...
}

location = /bbs {
	...
	...
}


~	使用正则表达式匹配URI地址, 区分大小写

	location ~ /image/ {....}				

~*	使用正则表达式匹配URI地址, 不区分大小写 

	location ~* /image {....}				http://10.1.2.1/IMAGES/

	location ~* \.jpg$ {.....}

	location ~* \.(jpg|gif|png|jpeg)$ {......}


^~	 

	location ^~  /image {
		....
	}
	
		匹配所有以/image开头的URI地址，匹配到后，立刻响应客户端 
	

优先级：

	=   --->   ^~   ----> ~   ------>   ~*   ------>    /



	
	
	
	

Nginx反向代理 

server {
	listen 80;
	server_name www.bj.com; 
	location / {
		proxy_pass 后端服务器;
	}
}

后端服务器：
	proxy_pass 
	
	
示例1：客户端通过http://192.168.122.101访问nginx时，以本地页面响应；通过http://192.168.122.101/forum访问时，代理到后端服务器 

		location / {
			root   html;
            index  index.html index.htm;
		}

        location /forum {
            proxy_pass http://192.168.122.102/;
        }

注意： 

	1) 如果location后写自定义的URI地址，在做反向代理时，必须要指定URI地址
		
	
示例2：

客户端http://192.168.122.101/discuz访问时，代理到后端服务器192.168.122.102的bbs目录下 


        location /discuz {
            proxy_pass http://192.168.122.102/bbs;
        }



特殊情况：

如果在定义location时，加入了~  ~* 这样的模式匹配字符，proxy_pass在写时，只能写到服务器地址

        location ~ /discuz {
            proxy_pass http://192.168.122.102;
        }
		
	注意： 后端服务器要存在相同名称的目录
		
	


示例4： 配置nginx不再响应客户端访问请求，所有访问请求全部代理到后端服务器 

        location / {
            proxy_pass http://192.168.122.102;
        }



		
此时，对于后端服务器来说，access_log中记录的日志，客户端IP是nginx的IP

192.168.122.101 - - [05/Jan/2017:21:39:22 +0800] "GET / HTTP/1.0" 403 4954 "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"


配置proxy_set_header,实现后端服务器记录真实的客户端IP 

        location / {
            proxy_pass http://192.168.122.102;
            proxy_set_header x-real-ip $remote_addr;
        }


proxy_set_header x-real-ip $remote_addr;

	代理在httpd请求报文中加入x-real-ip段的内容，该内容是变量$remote_addr的值，即真实客户端的IP

编辑后端服务器配置文件/etc/httpd/conf/httpd.conf,修改combined日志格式，将客户端地址%h换成%{x-real-ip}i,表示记录HTTP请求报文中X-Real-IP的内容

LogFormat "%{x-real-ip}i %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined

刷新浏览器，再次查看后端服务器access_log，日志中记录的是真实客户端的IP地址192.168.122.1 

192.168.122.1 - - [05/Jan/2017:21:48:50 +0800] "GET /icons/poweredby.png HTTP/1.0" 304 - "http://192.168.122.101" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"





Nginx负载均衡 

	upstream模块 
		实现应用的负载均衡

	算法：
		roundrobin, rr, 轮询， 默认；     支持为后端服务器设置权重(weight)
		ip_hash		相同IP地址的客户端请求, 　nginx会代理同一台后端服务器 
			解决会话保持
	


实现负载均衡：

upstream <组名称> {

	[调度算法];
	server IP:port [weight=<number>] [max_fails=<number>] [fail_timeout=<number>];
	server IP:port [weight=<number>] [max_fails=<number>] [fail_timeout=<number>];
	server IP:port [weight=<number>] [max_fails=<number>] [fail_timeout=<number>] [backup];
	
}

	weight=<number>					设置服务器的权重值 
	max_fails=<number>				检测失败的次数
	fail_timeout=<number>			检测的周期，单位为秒
	backup 							设置为备份服务器
	
upstream的定义必须在server{..}外定义


location / {
	proxy_pass http://<组名称>
}


示例1： 实现负载均衡 


    upstream websrv {
        server 192.168.122.102 weight=1 max_fails=2 fail_timeout=2;
        server 192.168.122.103 weight=1 max_fails=2 fail_timeout=2;
    }

	location / {
        proxy_pass http://websrv;
        proxy_set_header x-real-ip $remote_addr;
    }



提供sorry页面：

    upstream websrv {
        server 192.168.122.102 weight=1 max_fails=2 fail_timeout=2;
        server 192.168.122.103 weight=1 max_fails=2 fail_timeout=2;
        server 127.0.0.1:8080 backup;
    }

虚拟主机配置：

    server {
        listen       127.0.0.1:8080;
        server_name  localhost;

        location / {
            root   /sorry;
            index  index.html index.htm;
        }
    }



	
	
	

Nginx反向代理缓存

	缓存组成的两部分: 
		共享内存: 存储键和缓存对象元数据
		磁盘空间：存储数据

定义缓存空间

	proxy_cache_path: 不能定义在server{}中


proxy_cache_path /nginx/cache/first levels=2:1:2 keys_zone=first:20m max_size=1G

levels=
	定义缓存目录子目录的级别，及每个子目录的名称字符个数; 最多只能有3级子目录
	levels=1:2:2，3级子目录，第1级目录字符个数为1，第2级目录字符个数为2，第3级目录字符个数为2，字符个数最多只能有2个
keys_zone=name:size
	定义存储键的区域(定义共享内存的名称)
max_size=1G
	指定/nginx/cache/first中的1G空间用于存储缓存数据 
	


Nginx缓存配置：

定义缓存存放路径为/web/cache, 最多使用1G空间; 并定义键值区域名称为first，大小为20m

proxy_cache_path /web/cache levels=1:2 keys_zone=first:20m max_size=1g;

在location中开启缓存功能，指定使用键值名称为first的缓存
在httpd响应报文中添加额外项X-cache，用于查看缓存是否命中

add_header x-cache "$upstream_cache_status by $server_addr";

	$upstream_cache_status: 用于记录缓存是否命中的状态  (HIT, MISS, EXPIRED)

	$server_addr		服务器地址

location / {
    proxy_pass http://webserver/;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_cache first;						>>>>使用内存first中保存的缓存
    proxy_cache_valid 200 1m;		
}

proxy_cache_valid 200 1m;

	表示为状态码为200的数据缓存1分钟 

查看缓存是否命中，在浏览器中按F12打开开发者模式，查看HTTP响应报文，可以看到X-cache:HIT by 10.1.2.1信息，表示缓存命中
	








1、if指令  

if (条件) {......}       							
	
	{...}	代表条件为真时的nginx操作 	


condition条件的写法：

1) 变量名 

	
	如果变量的值为空，或者为以"0"开头的任意字符串，条件为假，其他则为真 
	
	if ($slow) {....} 
	
2) 使用"="或者"!="比较变量的值

	if ($request_method = POST) {.....}
	
3) 使用正则表达式与变量的值进行匹配 

	变量名与正则表达式间使用~, ~*, !~, !~*进行连接   
	
	在正则表达式中使用()可以对字符进行分组，在{}中可以用$1....$9引用分组
	
	正则表达式写时不需要加双引号，但是如果正则表达式中含有}和;字符，则必须要使用双引号
	
	if ($http_user_agent ~* MSIE) {.....}


4) 判断请求的文件是否存在

	if ( -f $request_filename) {.....}
	
	if (!-f $request_filename) {.....}
	
5) 判断请求的目录是否存在 (-d, !-d)

6) 判断请求的目录或文件是否存在 (-e, !-e)

7) 判断请求的文件是否可执行 (-x, !-x)



WebDAV(Web-based Distributed Authoring and Versioning)
一种基于HTTP 1.1协议的通信协议，它扩展了HTTP 1.1，在GET,POST,HEAD等几个HTTP标准方法以外添加了一些新的方法，使应用程序可直接对Web Server直接读写，并支持写文件锁定（Locking)及解锁(Unlock)，还可以支持文件的版本控制。

rpm httpd默认支持DAV功能

通过此协议可以支持在Web Server上传文件 


Nginx读写分离

	前端：Nginx服务器  192.168.122.101 
	后端：Apache服务器 192.168.122.102   192.168.122.103(可在此服务器上传文件)
	
确保192.168.122.103服务器开启DAV功能

确保Apache配置文件加载了DAV相关模块 

# vim /etc/httpd/conf/httpd.conf 

	LoadModule dav_module modules/mod_dav.so
	LoadModule dav_fs_module modules/mod_dav_fs.so

在相应网页根目录授权段中开启DAV 
<Directoy "/var/www/html">
	....
	dav on 
</Directory>

确保运行httpd进程的apache用户对网页根目录拥有写入权限

# setfacl -m u:apache:rwx /var/www/html/

测试在客户端可以向192.168.122.103服务器上传文件 

# curl -T /etc/issue http://192.168.122.103 


前端Nginx服务器配置读写分离，读操作代理到192.168.122.102上，写操作代理到192.168.122.103上；


location / {
	proxy_pass http://192.168.122.102;
	if ($request_method = PUT) {
		proxy_pass http://192.168.122.103;
	}
}

测试nginx读写分离操作是否成功 

测试读操作：

[root@www ~]# curl http://192.168.122.101

<h1> web-1 ON Apache </h1>

测试写操作：

[root@www ~]# curl -T /etc/fstab http://192.168.122.101
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html><head>
<title>201 Created</title>
</head><body>
<h1>Created</h1>
<p>Resource /fstab has been created.</p>
<hr />
<address>Apache/2.2.15 (CentOS) Server at 192.168.122.103 Port 80</address>
</body></html>

 
后端两台服务器通过rsync+inotify进行数据同步，保证上传的数据可以同步到后端所有服务器上





	

	
2、rewrite指令 ---------------	URL重写

	该指令通过使用正则表达式的使用来改变URI。
	可以同时存在一条或者多条，按顺序依次对URL进行匹配和处理 
	
	该指令可用于 server, location, if 中 
	
	语法结构： 
	
		rewrite <正则表达式> <REPLACEMENT> [FLAG]
		
			REGEX 	用于匹配URI的正则表达式 
			
			注意： 
				1) rewrite接收到的URL地址不包括主机名称部分 
				2) 不包括URL地址中的请求指令 
				
					https://reg.jd.com/reg/person?ReturnUrl=https%3A//sale.jd.com/act/r1z8LpvTcxkDbge.html

		REPLACEMENT		
			匹配成功后用于替换URI中被截取内容的字符串。
			默认情况下，如果字符串是以http://或者https://开头，则不会继续向下对URI进行其他处理，而直接将重写后的URI返回给客户端 			
			
			支持变量的使用 
			
		FLAG 
		
			1) last 
				终止继续在本location块中处理接收到的URI，并将此处重写的URI作为一个新的URI，使用下一个location块进行处理 
				
				location / {
					rewrite ^(/myweb/.*)/media/(.*)\..*$	$1/mp3/$2.mp3  last; 	
					rewrite ^(/myweb/.*)/audio/(.*)\..*$	$1/mp3/$2.ra   last;
				}
				
			2) break 
				将此处重写的URI作为一个新的URI，在本块中继续进行处理。该标志将重写后的地址在当前的location块中执行，不会将新的URI转向到其他location块
				
				location /web/ {
					rewrite ^(/myweb/.*)/media/(.*)\..*$	$1/mp3/$2.mp3 break; 
					rewrite ^(/myweb/.*)/audio/(.*)\..*$	$1/mp3/$2.ra break;
				}
			
			3) redirect 
			
				将重写后的URI返回给客户端，状态代码为302，指明是临时重定向，主要用在replacement不是以http://或者https://开头的情况下
			
			4) permanent 
			
				将重写后的URI返回给客户端，状态代码为301，指明是永久重写向

				

示例1： 

    location / {
        root   /web;
        index  index.html index.htm;
        rewrite ^/mp3 http://192.168.122.101/audio;
    }



示例2： 

        location / {
            root   /web;
            index  index.html index.htm;
            rewrite ^/mp3/(.*\.html)$ http://192.168.122.101/audio/$1;
        }

		
        location / {
            root   /web;
            index  index.html index.htm;
            rewrite ^/mp3/(.*\.html)$ $scheme://$host/audio/$1;
        }


示例3： 域名跳转  

        location / {
            root   /web;
            index  index.html index.htm;
            rewrite ^/ http://www.jd.com;
        }

		
		
		
		
		
		

nginx防盗链 

    server {
        listen 80;
        server_name www.d.org;
        location / {
            root /abc;
            index index.html;
            valid_referers none blocked www.d.org;			>>> 定义有效的访问地址
            if ($invalid_referer) {							>>> 如果访问地址无效
                return 404;
            }
        }
    }

	
   location / {
      root /d.org;
      index index.html;
      valid_referers none blocked www.d.org;
      if ($invalid_referer) {
	  rewrite ^/ http://www.d.org break;
      }
   }
	
	
www.d.org：

[root@nginx_server conf.d]# ls /d.org/
index.html  test.html

[root@nginx_server d.org]# cat index.html 
<h1>www.d.org</h1>

<a href="test.html">Test Test Test</a>


www.c.org: 

[root@nginx_server d.org]# ls /c.org/
index.html
[root@nginx_server d.org]# 
[root@nginx_server d.org]# cat /c.org/index.html 
<h1> www.c.org </h1>

<a href="http://www.d.org/test.html">ccccccccccccccccccccccccc</a>
[root@nginx_server d.org]# 

		

		
	
						
Nginx变量 

1) $args 

	存放URL中的请求指令 
	
	https://reg.jd.com/reg/person?ReturnUrl=https%3A//sale.jd.com/act/r1z8LpvTcxkDbge.html   
	
		ReturnUrl=https%3A//sale.jd.com/act/r1z8LpvTcxkDbge.html 

2) $content_length 

	存放请求报文中content_length字段内容
	
3) $content_type 

	存放请求报文中content_type字段内容
	
4) $document_root 

	存放针对当前请求的根路径
	
5) $document_uri ===  $uri 

	存放请求报文中的当前URI，并且不包括请求指令 
	
	https://reg.jd.com/reg/person?ReturnUrl=https%3A//sale.jd.com/act/r1z8LpvTcxkDbge.html
				
		/reg/person		
				
6) $host 

	存放请求报文中的主机部分 
	
	https://reg.jd.com/reg/person?ReturnUrl=https%3A//sale.jd.com/act/r1z8LpvTcxkDbge.html
				
		reg.jd.com		
				
7) $http_user_agent 

	存放客户端代理信息(浏览器)

8) $http_cookie 

	存放客户端的cookie信息
				
9) $limit_rate

	存放nginx服务器对网络连接速率的限制，也就是ngnix配置文件中limit_rate指令的值 
	
10) $remote_addr 

	存放客户端地址 
	
11) $remote_port 
	
	存放客户端端口 

12) $remote_user 
				
	存放客户端的用户名 

13) $request_body_file 

	存放发给后端服务器的本地文件资源名称 
	
14) $request_method 

	存放客户端请求资源的方法， GET, POST, PUT, DELETE, HEAD 
				
15) $request_filename 

	存放当前请求的资源文件的路径名 
	
16) $request_uri 

	存放当前请求的URI，并且带有请求指令 
	
	https://reg.jd.com/reg/person?ReturnUrl=https%3A//sale.jd.com/act/r1z8LpvTcxkDbge.html
	
		/reg/person?ReturnUrl=https%3A//sale.jd.com/act/r1z8LpvTcxkDbge.html

	
18) $scheme 

	存放客户端请求使用的协议，如http, https 
	
19) $server_protocol 

	存放客户端请求协议的版本	HTTP/1.0   HTTP/1.1 
	
20) $server_addr 

	存放服务器地址 
	
21) $server_name   

	存放了客户端请求到达的服务器的名称
	
22) $server_port 

	存放了客户端请求到达的服务器的端口号
	

